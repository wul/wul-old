---
layout: post
title: 逻辑回归的一个日常应用
date: 2014-08-28 18:22:40 +0800
comments: true
categories: ML
author: <Wu Li> li.koun@gmail.com
---
    学了机器学习，一直没找到好的练习。经常练手的诸如垃圾邮件过滤，似乎已经有很多实现了，况且我也不是很感兴趣。翻着手机查看交通违章记录的时候，突然想到在网站上如果想查看违章记录，需要输入一堆东西，还要图片验证校验码，比较麻烦。 刚好，这些过程，比如自动获取网页，POST 信息，用程序实现都很方便，让人感兴趣的时校验码输入，刚好能够练习一下机器学习学到的东西。
   于是用 Python 简单实现了Logistic Regression，配合一些手工得到的样本，图片识别很成功，网站的校验码设置也比较简单，
It seems that Lisp built-in lacking a mechanism to allow user to manager their own programming library just like C/Python/Java . The built-in functions/macros such as "defpackage", "in-package", "load", "require" is merely for simple organisation of python files. But for a large library that has nested directories and different sub-package. It will soon become complicated to load them and to resolve the dependencies.

So, we have ASDF. ASDF is "A system definition facility". Just like autotool in C, it can manage the correlations between files in your library, compiling them, loading them for your use.

I am using SBCL, it has ASDF library included by default. And, currently ASDF 3 is published. As i am a new comer, following the official instruction of ASDF website. Just familiar with ASDF 3 is enough, no burden of legacy interfaces.  Here is some essentials to ASDF and i will illustrate how to use ASDF to build my hello world library.
First, define a hello.asd (always use the .asd suffix, just like suffix ".in" for autoconf). This file describes your system. Find more details about usage in ASDF manual. In this example, we just define 3 additional files: packages.lisp, macros.lisp, and hello.lisp and set their dependencies.

    (asdf:defsystem :hello
      :name "Hello System"
      :description "hello: a sample file system."
      :version "0.2.1"
      :author "Wu Li <who@unknown.com>"
      :licence "Public Domain"
      :components ((:file "packages")
                   (:file "macros" :depends-on ("packages"))
                   (:file "hello"  :depends-on ("macros"))))
				   
Define your package in package.lisp. Here we define a new package :hello and set a nick name HI.

    (defpackage :hello
      (:nicknames hi)
      (:use :common-lisp)
      (:export main))

Leave macros.lisp empty for simplicity.
Define hello.lisp. We just define one function here.

    (in-package :hello)
    (defun main () (format t "Hello world~%"))


So far, we have programs and we defined the package by using ASDF, then we can use ASDF to load this package for use.

Load package. 

    (require :ASDF)                     ;load ASDF package if necessary
    (push #P"/path/to/the/package/" asdf:*central-registry*) ;tell ASDF where the lib can be found
    (asdf:load-system :hello)   ;the symbol should be identical with the one defined in hello.asd


Run function owned by hello package

    (hi:main) -> Hello world            ;hi is a nickname to hello package
	
This is a standard use of ASDF to build package.
