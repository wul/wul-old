<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Wu's Blogs]]></title>
  <link href="http://www.wuli.mobi/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.wuli.mobi/"/>
  <updated>2017-05-18T23:56:03+08:00</updated>
  <id>http://www.wuli.mobi/</id>
  <author>
    <name><![CDATA[Wu Li]]></name>
    <email><![CDATA[li.koun@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 语言使用回顾]]></title>
    <link href="http://www.wuli.mobi/blog/2016/01/09/pythonexp/"/>
    <updated>2016-01-09T00:00:00+08:00</updated>
    <id>http://www.wuli.mobi/blog/2016/01/09/pythonexp</id>
    <content type="html"><![CDATA[<h1>Python 语言使用回顾 (一)</h1>

<p>Python是个非常好的语言，用了8年了。从最初对其脚本语言的认知到接触使用到各种高级概念。越发觉得这个语言对于初学者非常友善，同时对于有经验的程序员带来很多帮助，能够在各个方面进行运用，来解决实际的工程问题。</p>

<p>先从友善度来讲，Python对于编程小白或者老程序员都是非常友好的，语法简单易学。现在的受过高等教育的各行各业从业者，基本上都有过使用语言的经验，比如大学我们都学过谭浩强的c语言，至少对于计算机语言都有所认知。对于曾今从理工科毕业尤其是主修通讯，自动控制，信息管理的，可能会接触处更多的诸如汇编语言，都具有编程相关知识和或多或少编程技能。我们来对比C++，Java语言来讲它们语法上的区别，来看Python在语法学习上的友善度。为什么用C++和Java而不是其他语言呢，那是因为它们都是支持OOP的语言，可对比性多一些。那么我们通过一些例子来看。</p>

<p>从最简单的，每个程序都要演示的入门程序的Hello World！来看，C++的语法为:</p>

<pre><code>#include &lt;iostream&gt;
int main()
{
    std::count &lt;&lt; "Hello, World!\n";
    return 0;   
}
</code></pre>

<p>Java语法为:</p>

<pre><code>public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World");
    }
}
</code></pre>

<p>然后再来看Python的</p>

<pre><code>print("Hello World")
</code></pre>

<p>C++和Java都需要一个程序入口，Python则一行一行的解释执行；Java需要把所有的东西都写成类，而Python即可面向对象编程，又可以使用传统的过程化方式来编程。</p>

<p>以上是个简单的例子，可能只是觉得似乎需要输入的代码少了。我们再看看其他语法方面。</p>

<p>Python的语法在形式上区别于其他两门语言的最大的特点是Python将缩进与对齐强制变成语法的一部分，比如下面例子</p>

<pre><code>for x in range(10):
    if x &gt; 5:
        print(x ** 2)
    else:
        print(x ** 3)

    print("Process % done", x)
</code></pre>

<p>这里的代码缩进，对齐都很整齐，这不是一种简单的装饰或者说为了维护方便。这是强制性的。Python和Java，C++不同，不是使用大括号对&#8221;{&ldquo;和&rdquo;}&ldquo;来表示一个语句块的, 它是通过缩进来表示一个语句块，来区分不同的逻辑层次。 比如后面的 <code>print("Process...")</code>语句如果没有正确缩进，放在和其他<code>print</code>相同的列或者与<code>for</code>处于相同的列，就会出现程序的语义或语法错误。 初次看到Python的这个特性，很多人或许说这不灵活，不能灵活写代码。不过用了一段时间你你就会发现这种设置的好处，最大的好处是增强了程序的可维护性。</p>

<p>使用C或者Java写程序，因为使用大括号来匹配语句块的开始与结束，因此，对于那些不遵守coding guidelines的团队来讲，就没有驱动力奖程序写的简洁，最直接的问题就是不对齐，不工整。源程序的存在目的在于维护，在于程序员之间进行交流。团队中有人写完成程序，随着项目的进展，很可能需要修改增加新的特性。即使产品部署后，也需要修改bug，都需要后续的团队人员来读现有的程序，来理解原先的实现。代码除过让机器去运行，最重要的是用来程序员之间进行交流。</p>

<p>Python语法简洁性的另外一个方面表现在对一些概念进行简化，抛弃不必要的一些语言特性。</p>

<p>比如C++和Java对于类属性和成员函数，都有public，protected和private等存取限定。这种设置对于又经验的程序员可能不觉得困难，但是对于初学者，在诸如外部调用或者继承调用等不同使用场景下可能觉得比较烦杂。这虽然本着安全角度来考虑，但是是通过技术手段来限制，Python OOP就没有这种概念，对于该存取不该存取的属性，并没有技术手段来限制，而是通过一些common rules来形成共识，必须以下横线&#8221;_&ldquo;开通的变量就是private属性，两个下横线&rdquo;__&ldquo;则代表更强private意味。 那么所有的人都遵循这些规则，我们一样可以写出安全程序，那么语法上就没有那么繁杂了。</p>

<p>另外，C++和Java实际上提供了很多不是那么常用的的特性，至少是在频率上不那么常用。那么为什么不大胆的舍弃一些特性使得语言显得简练呢？ 这样最大的好处就是嫌少了团队的学习成本。对于一个人来说，很多时间花费在并不常用的特性学习上可能看不到这个代价，但对于一个团队来讲，这个代价就要倍乘。这是因为，一旦有人在代码中用到这些特性，其他一起维护代码的团队成员就不得不熟悉这些特性，来理解采用这些技术的实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[闭包]]></title>
    <link href="http://www.wuli.mobi/blog/2015/05/04/closures/"/>
    <updated>2015-05-04T14:27:03+08:00</updated>
    <id>http://www.wuli.mobi/blog/2015/05/04/closures</id>
    <content type="html"><![CDATA[<p>套用维基百科的解释：闭包（closure）是此法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。我们从一个简单地例子来分析这些话在说什么。</p>

<pre><code>def foo(bar):
    def plus_one():
    return bar+1          #1 引用自由变量 bar

    return plus_one
func1 = foo(100)
func2 = foo(101)
print(func1())                #2 bar 仍然存在， 输出为101
print(func2())                #3 bar 仍然存在， 输出为102
</code></pre>

<p>这个例子中，foo 函数中一个局部变量 bar 被一个其内部定义的函数 plus_one 所引用，并且这个函数被当做对象作为返回值返回。当被返回的函数被调用的时候，其运算的时候仍然能够访问得到 foo 所定义的局部变量 bar，即使此时已经不在 foo 函数内部。 这个就是闭包的一个基本用法。</p>

<p>首先确定的是，闭包在创建的时候封闭了当时的一些状态，并且能够此后被调用的时候利用当时的状态信息。上面例子中，诸如局部变量（plus_one的enclosing函数）bar被plus_one所保留，即使离开了 foo 的执行，plus_one 仍够访问这个当初保留的状态，也即 bar 这个变量。</p>

<p>再者，我们看到，根据不同的环境创建的函数保留了不同的状态而在此后表现出不同的行为（输出分别为101和102），比如根据参数不同生成的两个函数 func1和 func2，非常类似模式里面的工厂方法。创建的时候根据不同的输入而此后表现出不同的行为带给程序员很大的灵活性。</p>

<p>最后，在使用闭包的过程中，需要注意，闭包引用的变量可能在后来发生改变，因此也会影响闭包的行为。比如：函数 plus_one 在创建的时候保留了 bar 的状态，但不意味着此后如果 bar 的值再次修改，不会影响 plus_one 的调用结果。修改上面代码如下:</p>

<pre><code>def foo():
    bar = 100                
    def plus_one():
    return bar+1         
bar = 99                 # 在创建plus_one函数对象之后，修改 bar 会影响 plus_one 的调用结果
    return plus_one
func = foo()
print(func())                # 输出100
</code></pre>

<p>可以看到，return 函数对象plus_one之前，修改过 bar 的值，plus_one 的调用使得它会使用最后一次 bar 的赋值。需要注意一下这个特性，尤其是引用的变量处于循环当中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LEGB规则与 Python 变量的存取]]></title>
    <link href="http://www.wuli.mobi/blog/2015/04/30/legb/"/>
    <updated>2015-04-30T16:38:35+08:00</updated>
    <id>http://www.wuli.mobi/blog/2015/04/30/legb</id>
    <content type="html"><![CDATA[<p>每种语言都有检索变量的规则，决定了当程序查找一个变量的时候，会去哪里找，遵循什么样的搜索顺序。Python 亦然，Python 内部的查询变量的规则简称 LEGB。它是 Local，Environment，Global，Builtin 首字母的缩写。</p>

<p>具体说来，加入一个函数要操作一个叫做 x 的变量，那么 Python 首先在函数内部，局部（Local）范围来查找这个变量；如果没有找到，则到包含这个函数定义的外围去查找（称作 Enclosing)，这个外围或许是另外一个函数（包括匿名函数），如果还是没有，继续朝外查找，一直到模块级别，从这里定义了全局（Global）变量中寻找；如果仍然没有找到，则查找 Python 内置变量(Built-in)，看是否有相同名字的。</p>

<p>在上述查找过程中，一旦变量找到，就不再继续朝外围查找。也就是说 LEGB 同时也定义了从 L 到 B 得优先级。根据这个规则，读 Python 程序的时候，就非常容易判断程序到底操作的是哪个变量。比如一个文件 spam.py：</p>

<pre><code>eggs = 5
def func():
    eggs = 4
    def set():
       eggs = 3
       print(eggs)

    set()               #1  print 3
    print(eggs)         #2  print 4

func()
print(eggs)             #3  print 5
</code></pre>

<p>屏幕依次会输出3，4，5.  道理遵循 LEGB 规则，  #1 set()函数里对 eggs 进行赋值操作会产生一个 set 函数的局部变量；#2 因为之前的 set() 操作处理的时 set 函数内部的变量，并不影响 func 定义的变量 eggs，所以这个变量内容不变；#3 同理 func() 函数调用并不影响全局定义的 eggs 变量，所以打印的全局变量值仍然是5.</p>

<p>从上面的操作及对变量的影响来看，LEGB 规则确实起到作用，变量的查找遵循由内而外的原则。由内到外的指的是 Local->Enclosing->Global->Built-in</p>

<pre><code>--------------------------------------------------------------
|Built-in(Python):                                           |
|    Python 内置的一些预先定义的名字：包括 open ，Exception 等。   |
|    --------------------------------------------------------|
|    |Global(Module):                                        |
|    |    模块文件最外面定义的变量名，属于模块的变量                | 
|    |    ---------------------------------------------------|
|    |    |Enclosing                                         |
|    |    |    定义在外层包含函数里的名字                        |
|    |    |    ----------------------------------------------|
|    |    |    |Local                                        |
|    |    |    |    函数内部所定义的变量                        |
--------------------------------------------------------------
</code></pre>

<p>那么，如果在函数内部想特意使用外面的变量，而不是产生一个新变量，又如何做呢？ Python 提供两个语句，global 和 nonlocal 来声明外围的变量，而不是在函数内部产生一个同名的局部变量。举例如下：</p>

<pre><code>eggs = 5
def func():
    global eggs
    eggs = 4

hams = 10
    def set():
    nonlocal hams
        hams = 99

    set()               
    print(eggs)         #1  print 4
    print(hams)         #2  print 99


func()
print(eggs)             #3  print 4
</code></pre>

<p>此时屏幕输出4,99,4。 #1输出为4原因显而易见；#2输出99是因为 set()函数调用使用 nonlocal 声明，表示改变的 hams 变量是外围 func()函数内部所定义的变量；#3则是因为 func()调用声明 eggs 是全局变量，进而修改了这个变量的值。</p>

<p>需要注意的是global 与 nonlocal 声明的用法。一个声明了变量属于 module（全局的），一个声明了变量属于外围的（上级函数）。如果在 func（）内部的语句“global eggs”变成“nonlocal eggs”则会引起语法错误，因为 eggs 是个全局变量，使用前需要 global 来声明。</p>

<p>到了这里，我们可以自认为了解了Python如何查询，修改变量。基本上如此，对于一般声明的变量是这个规则。但是对于有些变量，他们的声明作用域比较特殊，需要区别对待，依旧举例说明：</p>

<pre><code>x = 100
lst = [1,2,3]
lst2 = [x for x in lst]
print(x)                   #1 still 100

try:
    1/0
except Exception as x:
    pass

print(x)                   #2 UnboundLocalError: local variable 'x' referenced before assignment
</code></pre>

<p>上面的例子中，注意变量 x，除过普通用法，它还用作在另外两个地方</p>

<ul>
<li><p>Comprehansion 变量:</p>

<p>诸如[x for x in lst]里的x，这里定义的这种变量，它的作用域只是这个表达式，Python 3.x之后放置这些变量与其他变量的冲突，修改其作用域到表达式内部。</p></li>
<li><p>Exception 变量： 诸如 &ldquo;Exception as x&rdquo;, 一旦异常被捕获，x 就用来被存放异常对象，<strong>并且在异常处理 excpt 语句结束后被删除！</strong>, 因此之后的 print(x)会报错！</p></li>
</ul>


<p>当然了，如果你仔细维护你的代码，并且遵循 LEGB 规则，你就不会起名同名变量来做类似操作，因此即使你不知道这两种特殊作用域的变量也没有关系。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 包管理以及导入包时候一些问题辨析]]></title>
    <link href="http://www.wuli.mobi/blog/2015/04/29/issues-of-imports/"/>
    <updated>2015-04-29T14:16:39+08:00</updated>
    <id>http://www.wuli.mobi/blog/2015/04/29/issues-of-imports</id>
    <content type="html"><![CDATA[<p>之前写了一点关于Python相对包导入机制的东西。除过概念上要区分传统导入方式，记住包导入时候如何寻找路径之外。还经常会碰见在包管理以及使用上因为随意混合这两种方式所带来的意想不到的后果。</p>

<p>之前说过，对于传统包引用：</p>

<pre><code>import foo
</code></pre>

<p>Python2.x和Python3.x对其的解释是不同的。</p>

<ul>
<li>Python2.x: 寻找当前路径（CWD），然后系统路径</li>
<li>Python3.x: 只查找系统路径</li>
</ul>


<p>那么，加入我们有一个包&#8221;foo&#8221;，其内部模块如下:</p>

<pre><code>foo \
    __init__.py
    main.py
    bar.py
    baz.py
</code></pre>

<p>其中, main是一个主程序，也放在这个包中，内容如下：</p>

<pre><code>import bar
</code></pre>

<p>bar.py内容只有一行，就是加载 baz 包:</p>

<pre><code>import baz
</code></pre>

<p>baz内容略过，不重要。那么我们运行如下命令</p>

<pre><code>python foo/main.py
</code></pre>

<p>无论对于Python2.x和Python3.x，结果都正常，很和谐，没有错误。这是因为无论从相对路径中还是系统绝对路径中， 主程序 main.py 所在的目录都在其中，所以 python3.x 和 python2.x 都能正常工作。但是如果 main.py 不在 foo 目录下面，将其内容修改为<strong>import foo.baz</strong>，如其下所示:</p>

<pre><code>main.py
foo \
    __init__.py
    bar.py
    baz.py
</code></pre>

<p>那么运行python3 main.py会出现异常&#8221;ImportError: No module named &lsquo;baz&rsquo; &ldquo;，这是因为python3.x 只会在系统目录下查找 baz 模块，而系统目录只是一组包含主文件程序文件 main.py 所在目录的列表，里面并不包含baz这个模块。 要解决这个问题，唯有把 foo 所在的目录写入到 sys.path 中去（手工写入或者通过 PYTHONPATH 环境变量）</p>

<p>关于传统的 import mod 语句，重点在于：<strong>在 Python3.x 下，如果工作于包管理模式下，则不会从mod.py 所在目录下查找 mod 模块（除非这个目录被用各种方式加入到 sys.path 中去）</strong></p>

<p>那么对于相对导入 from . import mod 这种语句，我们知道它是用来在包内各个模块至今互相引用的。它的初衷服务于包管理。我们仍然使用包含main.py的最初例子, 这个时候不管 Python2.x还是Python3.x在运行 main.py 主程序的时候都会抛关于无法相对导入模块的异常。Python 不允许你在使用相对导入这种包管理的时候把包的目录当做程序目录。你必须要吧 main.py 从包内部拿出来，比如放在 foo 所在的同级目录下。为什么？ 不清楚。</p>

<p>重点在于，<strong>如果你使用了相对导入，那么就需要将包内部的目录层次完全当做包来使用，不要混合程序文件在其中</strong>。</p>

<p>如果想使用相对导入模式，你会碰到更大麻烦。比如对于包内的模块 bar.py, baz.py， 我怎么在这些文件中加入 unittest，并把这些 module 文件当做程序文件来进行单元测试呢，这可是最好的放 unittest 的地方啊？ 这是一个好问题。</p>

<p>答案是可以用传统的包导入方式来解决。 什么？ 又回去了！！！ 我也不想啊，Python 看到这里我也想找个人抽一抽，费劲理解这么多概念，一会碰到这个问题一会碰到那个问题，最后来还是用老方式好。 这里一点都不 Pythonic。</p>

<p>抱怨归抱怨，如何解决让包内的文件同时可以当做程序文件来执行呢。 举个例子，对于 bar.py，我们使用</p>

<pre><code>from foo import baz
</code></pre>

<p> 一方面可以解决相对导入模式下无法当做程序文件使用；另外一方面可以解决不小心在 sys.path 下找到一个同名的 baz 文件而导入错的事情。当然了，代价就是敲的字符多了，当初从 import baz 到相对导入 from . import baz， 现在时 from foo import baz， baz 如果层次越深敲得越多。</p>

<p>似乎使用绝对导入能够使用的范围更为广泛。那么为什么要存在相对导入这种奇葩呢？他们说，能够解决一个层次复杂的 package 重新组织时候需要修改各个包的麻烦。 我相信这是对的，不过我也相信相对导入带来的麻烦更多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Relative Imports]]></title>
    <link href="http://www.wuli.mobi/blog/2015/04/22/python-relative-imports/"/>
    <updated>2015-04-22T10:11:17+08:00</updated>
    <id>http://www.wuli.mobi/blog/2015/04/22/python-relative-imports</id>
    <content type="html"><![CDATA[<h1>Python Relative Imports</h1>

<p>Python包内模块之间当然可以像我们熟知的包导入方式一样，通过<em>import</em>或者<em>from &hellip; import &hellip;</em>来完成。 但是这里有个细节问题，可能会出现并非开发者所想到的后果。通过举例来说明， 现在要开发一个包（Package）Hello，它的目录结构如下：</p>

<pre><code>Hello\
      __init__.py
      foo.py
      bar.py  
</code></pre>

<p>Hello这个包包含两个文件， foo.py 和 bar.py， 我们说 foo.py 包含一个函数叫做 <em>func</em>，bar.py 希望通过引入 foo 这个包来使用这个函数。那么对于 bar.py 来讲，导入并使用的方式可以如下：</p>

<pre><code>import foo
foo.func()
</code></pre>

<p>这个用法似乎也没啥问题。 但是Python2.x 与 Python3.x 对于<em>import foo</em>的解释是不同的。</p>

<ul>
<li>Python2.x:会在当前包（&#8221;Hello&#8221;）所在的路径中搜索叫做 foo 的包名，然后搜索系统路径(sys.path)</li>
<li>Python3.x:只会搜索系统路径</li>
</ul>


<p>可以看到，对于一些程序，如果既要运行在 Python2.x，又要运行到 Python3.x，可能会出现问题，考虑到 sys.path 里面的目录，其中一个路径恰好也有一个模块是 foo，那么在 bar.py 引入 foo 模块的时候，Python3.x 会用这个模块而非和 bar 在同一个包得模块 foo，当调用<em>foo.func()</em>要么报错（不存在），要么用得不是期望的函数。</p>

<p>那么如何通过显示的手段来指明我们想要引入的包，来避免模块内包互相导入呢出现的上述问题呢？ 这可以使用 Python 的相对导入（Relative Imports）机制。 通过</p>

<ul>
<li><strong>from .foo import func</strong></li>
<li><strong>from . import foo</strong></li>
</ul>


<p>来对包 foo 进行导入。 这种通过一个点来指明包内导入的方式叫做相对导入。</p>

<p>无论是Python2.x或者Python3.x碰见这种语句，都会只在当前包目录中查找想要导入的包，而不会去系统路径中去寻找，因此避免了不当导入。</p>

<p>当然，包得层次结构也不都一定是扁平的，只有一个目录，可能有子目录，子目录下可能还有下级子目录。那么又如何在包内导入其他目录下的模块呢？</p>

<p>有人或许已经猜到，既然像 Unix 访问目录一样，用 “.”表示包内同一个目录。那么可以用“..”表示包层次结构中的上一层。仍旧通过举例说明，有一个复杂的目录结构如下：</p>

<pre><code>Hello \
      __init__.py
      a\
        __init__.py
        b\
          __init__.py
          b1.py
      c\
         __init__.py
         c1.py
</code></pre>

<p>Hello包包含子目录“a”和子目录“c”，其中子目录 “a”又包含二级子目录 “b”。 在目录“b”与“c”内分别有两个模块“b1”与“c1”。模块“c1”想使用“b1”中的函数“func”。</p>

<p>模块“c1”中可以用下面这种方式来引入模块“b1”.</p>

<ul>
<li><em>from ..b.b1 import func</em></li>
<li><em>import ..b.b1</em></li>
</ul>


<p>如同目录行为一样，很好理解，不用赘述。</p>

<p>可是，仍旧有人会说，其实也简单，将 Hello 包所在路径加入 sys.path 中，在模块“c1”中用如下语句也可以：</p>

<pre><code>from Hello.a.b.b1 import func
#
#or
#
import Hello.a.b.b1
</code></pre>

<p>是的，这种方式也可以。但首先，如果目录层次比较复杂，敲的字符会很长，不够经济；再者，如果目录进行挪动，需要改动代码，相对导入能够解决这个问题（相对路径如果保持不变）。</p>

<p>虽然用类似目录结构的方式相对导入包内的模块，但这种语句也只是适合包内导入，位于非包这种组织形式(包含__init__.py)的两个文件，不可以通过这种方式（from . .. import）来互相导入。</p>

<p>总结一下：Python 的相对导入的关键在于</p>

<ul>
<li>它限定了搜索的路径在于包内，而不会盲目的在系统路径中找寻一个相同的名字，避免了误导入。</li>
<li>所有的相对导入通过<em>from &hellip; import &hellip;</em>这种格式来完成</li>
</ul>

]]></content>
  </entry>
  
</feed>
