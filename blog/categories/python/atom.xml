<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Wu's Blogs]]></title>
  <link href="http://www.wuli.mobi/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.wuli.mobi/"/>
  <updated>2017-06-02T22:54:38+08:00</updated>
  <id>http://www.wuli.mobi/</id>
  <author>
    <name><![CDATA[Wu Li]]></name>
    <email><![CDATA[li.koun@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Singleton的实现]]></title>
    <link href="http://www.wuli.mobi/blog/2016/06/02/singleton/"/>
    <updated>2016-06-02T21:31:01+08:00</updated>
    <id>http://www.wuli.mobi/blog/2016/06/02/singleton</id>
    <content type="html"><![CDATA[<p>上次文章中用到了设计模式中的singleton， 显示了2中singleton的实现方式，要不不通用，针对每个类都得定义，要么用装饰器来实现，但singleton类不能够继承，总是有局限性。 其实还有一种方法实现能够优雅和自然的多，那就是利用类的静态方法$<strong>new</strong>$来实现。</p>

<p>我们常用的类实例的初始化方法是$<strong>init</strong>$，这个大家都知道。但是对于$<strong>new</strong>$就很少用到， $<strong>new</strong>$的作用是创建并返回实例，这里我们就可以大做文章，来决定每次是否创建一个新的实例还是返回一个已有的实例。 代码如下:</p>

<pre><code>class Singleton(object):
    _instance = None
    def __new__(cls, *args, **kws):
        if cls._instance is None:
            cls._instance = object.__new__(cls, *args, **kws)

        return cls._instance

obj = Singleton()
obj2 = Singleton()
obj is obj2
</code></pre>

<p>这样实现的Singleton类，如果其有子类继承它，则子类的实例也是singleton模式的行为。</p>

<p>当然了，也可以通过元类来实现singleton，通过重载（overloading)元类的$<strong>call</strong>$方法来控制自定义类实例的生成。</p>

<pre><code>class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        #this function is called by cls(), it will create one instace of cls
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

class Foo(metaclass=Singleton):pass

#trigger 
foo = Foo()
foo2 = Foo()
foo is foo2
</code></pre>

<p>原理都是相同的，存在一个字典记录类及其实例的对应表，在创建新的实例的时候先检查这个对应表，如果已有实例，则直接返回，如果没有就创建一个。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[装饰器实现的变形]]></title>
    <link href="http://www.wuli.mobi/blog/2016/05/30/decorator-morphing/"/>
    <updated>2016-05-30T23:33:02+08:00</updated>
    <id>http://www.wuli.mobi/blog/2016/05/30/decorator-morphing</id>
    <content type="html"><![CDATA[<p>最近看到关于Python来实现设计模式中的singleton模式，发现有两个例子特别有意思。看代码：</p>

<pre><code>class Foo():
    def __call__(self, *args, **argv):
        return self

Foo = Foo()
</code></pre>

<p>上面定义了类Foo， 在上面的代码运行完毕后，如果想创建Foo的实例，这些实例都是指向最早创建的那个实例。 这里有两步特别有意思并且互相呼应。 第一步实现了一个<code>__call__</code>方法， 意味着Foo的实例可以像使用函数一样来进行调用，并且始终返回实例本身。 第二步，<code>Foo = Foo()</code>做了名字的重新绑定， 那就意味着在此代码执行完毕后，已经没有Foo这个类型了， &ldquo;Foo&#8221;这个名字完全地绑定在一个Foo的实例上， 配合第一步声明的方法，此后所有的<code>Foo()</code>调用，本来是用来创建一个实例，现在只是调用那个已经存在的实例（此时实例名字为Foo）的<code>__call__</code>方法返回实例本身。这是一种嫁接的方式，在完成第一次实例的初始化方法后，屏蔽了对类初始化函数的再次调用，从而实现singleton模式。</p>

<p>但是这个实现有缺点，每个singleton类型的类都要做类似这样的一个名字重新绑定。并不是一个通用的方法来把某个类变成singleton。</p>

<p>另外一种实现方式代码如下：</p>

<pre><code>
def singleton(cls):
    ins = {}
    def wrapper(*args, **kws):
        obj = None
        try:
            obj = ins[cls]
        except KeyError:
            obj = cls(*args, **kws)
            ins[cls] = obj
        return obj

    return wrapper

@singleton
class Foo(): pass

@singleton
class Bar(): pass

foo1, foo2 = Foo(), Foo()
id(foo1) == id(foo2)   #True
type(Foo)              #function
</code></pre>

<p>这是一种通用的singleton实现方式，通过实现一个装饰器，来对任一想成为singleton的类进行装饰。</p>

<p>需要注意的是，无论Foo类还是Bar类，通过装饰后，其名字所代表的已经不在时原先的类，而且，被一个叫做wrapper的函数所代替。 这是因为，装饰器实质上是一个重新绑定定义的过程。其过程等同于</p>

<pre><code>Foo = singleton(Foo)
</code></pre>

<p>singleton这里是一个高级函数，它接受类作为参数名，返回一个函数代替了之前的Foo类的定义。</p>

<p>一般我们用装饰器来装饰函数，被装饰的对象与装饰后的对象是同样类型的，比如函数装饰器返回函数对象，类装饰器返回类对象。这里却使用了函数来代替被装饰的类，这在支持多特性的Python中，很容易做到这一点。 使用<code>Foo()</code>来创建一个类的实例，调用的是<strong>init</strong>方法，如果使用函数来代替，关键是将函数所接收到的参数以合适的方式传递给<strong>init</strong>构造方法。这里用到了可变参数的概念，通过<code>*args</code>和<code>**kws</code>来接受与应用变长的位置参数和变长的关键字参数，实现了鸭子类型。一个函数和一个类的构造行为一样，并且它的返回值也是这个类的实例，那么对于外界调用者来讲，这个函数对象就是这个类型对象。</p>

<p>既然函数能够伪装成类，当然类也可以伪装函数的行为。一般我们不是直接使用类构造方法来模拟函数的行为，而是使用Python的魔法函数<code>__call__</code>来达到这个目的。如下代码所示：</p>

<pre><code>def decor(f):
    class Wrapper:
        def __init__(self):
            self.func = f
        def __call__(self, *args, **kws):
            print("Inside class method")
            self.func(*args, **kws)

    return Wrapper()

@decor
def hello(name):
    print("Hello", name)

hello('Zhang San')
#Inside class method
#Hello Zhang San
</code></pre>

<p>在这里，hello函数经过装饰，实际上变成了一个Wrapper类的实例，对于hello函数的调用，也会变成对<code>__call__</code>函数的调用。</p>

<p>有机的结合Python各种高级概念，比如这里的magic函数，ducking type, 有的时候你会发现实现一些模式非常便利，这大概就是我喜欢Python的原因了吧，不费劲。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 语言使用回顾 (三)]]></title>
    <link href="http://www.wuli.mobi/blog/2016/02/01/python3/"/>
    <updated>2016-02-01T21:42:32+08:00</updated>
    <id>http://www.wuli.mobi/blog/2016/02/01/python3</id>
    <content type="html"><![CDATA[<p>Python是一门相比C，C++更为高级的语言。这里所说的高级并不包含褒义或者贬义，而是指相对于程序操作的对象，Python的使用者更关注与业务的需求还是更关注底层对操作系统的请求。</p>

<p>以前我们用C来写程序的时候，如果动态的创建变量，我们需要自己调用malloc等函数来向操作系统申请内存，自己管理好指针，并且在用完之后释放掉。比如，我们要有255个元素大小的一个列表，里面能够存放某种元素（如整数)，我们希望进行indexing，slicing和判断一个元素是否在内的操作。</p>

<pre><code>struct element {
    /* 简单的使用一个整数来构成element数据结构*/
    int value;
};

/* 产生一个255个指向element的数组 */
struct element **lst = (struct element**)malloc(sizeof(struct element*) * 255);

/* 初始化这个数组 */
for (int i=0;i&lt;255;i++) {
    struct element *p = (struct element*)malloc(sizeof(struct element));
    p-&gt;value = i;
    lst[i] = p;
}

/* indexing 操作,第三个元素 */
struct element *elem = lst[2];

/* slicing 操作, 去下标2到5中的所有元素 */
struct element **elems = (struct element**)malloc(sizeof(struct element*) * 4);
for (int i=0; i&lt;4; i++) {
    struct element *p = (struct element*)malloc(sizeof(struct element));
    memcpy(p, lst[2+i], sizeof(struct element));
    elems[i] = p;
}

/* 搜索操作,简单的O(n)复杂度搜索。判断一个元素是非在内 */
struct element v = {100};
for (int i=0; i&lt;255; i++) {
    printf("Check %d vs %d\n", lst[i]-&gt;value, v.value);
    if (lst[i]-&gt;value == v.value) {
        printf("True\n");
        break;
    }
}

/* 释放内存 */
for(int i=0; i &lt; sizeof(elems)/sizeof(struct element*); i++){
    free(elems[i]);
}
free(elems);

for(int i=0; i &lt; sizeof(lst)/sizeof(struct element*); i++){
    free(lst[i]);
}
free(lst);   
</code></pre>

<p>我们看到，C程序员必须要处理各种动态内存的分配与释放。 也就是说，除过业务逻辑（indexing， slicing， 查找），我们必须得照顾各种细节。这就意味着程序员要花至少2倍的精力去完成一个需求，这里所列举的业务逻辑非常简单，实际上来自客户的需求远比这个复杂，对于程序设计者，需要熟悉语言所带的各种数据结构，来看是否有现成的来完成逻辑所对应的抽象对象。现有自带的数据结构或者第三方库所带的数据结构如果有现成的数据结构支持业务逻辑是最好的，那就意味着程序员不必在意内存管理的细节（但仍然某种程度上需要熟悉这个库，了解其缺陷），如果没有支持的数据结构，势必需要自己来实现。</p>

<p>那么对于Python来讲，首先用户不必在意内存的管理，自有引用计数和垃圾回收机制，同时自带的数据结构也比较丰富，能够满足常规的业务逻辑，如上的代码如果用Python来实现非常简单，如下所示:</p>

<pre><code>lst = [x for x in range(255)]

#indexing
print(lst[2])

#slicing
print(lst[2:6])

#查找是否存在
print(100 in lst)
</code></pre>

<p>在Python中，整数本身就是一个对象（object），int类的实例，所以这里没有进一步向C一样封装成struct。 对比C的代码，明显感觉到对于list的操作要简单很多，省去了内存管理，省去了很多辅助代码。</p>

<p>应该讲，程序员的精力也是有限的。如果一个需求，你既要关注对客户需求的抽象，又要关注底层的内存处理细节，就需要有更多的精力投入，这样虽不能说顾此失彼，但至少提高了复杂度。如果语言能够像Python这样，省去了底层的细节，那么程序员就可以专注于客户需求的抽象和建模，自然会带来效率上的提升。</p>

<p>但这并不是说，Python这样的高级语言一定全方位都好，各有各的长处。C/C++长处在于速度和能处理广泛性，从嵌入式到大型应用开发； Python在于开发效率和对速度不敏感业务的开发，能够快速给出原型，然后快速迭代，满足客户和市场的快速变化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 语言使用回顾(二）]]></title>
    <link href="http://www.wuli.mobi/blog/2016/01/15/pythonexp2/"/>
    <updated>2016-01-15T06:36:33+08:00</updated>
    <id>http://www.wuli.mobi/blog/2016/01/15/pythonexp2</id>
    <content type="html"><![CDATA[<h1>Python 语言使用回顾 (二)</h1>

<p>接着来说Python的使用经验。上次谈到Python语法规范简洁，对于初学者很友善，同时对于老程序员来讲，会发现其比较简单，舍弃了一些不常用的语言特性。但这绝对不意味着Python功能不行，恰恰相反，Python是语言中的狗皮膏药，在各个领域都能发挥其作用。</p>

<p>我们来看看这个狗皮膏药能贴在那些领域。</p>

<p>对于系统编程，我们指的是和文件系统打交道，跟操作系统打交道。对于系统管理员，QA测试，企业IT来言，很多情况下就是要处理文件，处理进程,获取系统提供的一些服务等等。当然也包括调用一些操作系统的命令来间接地完成一些任务。比如使用snmp相关Linux命令来访问snmp agents，结合pexpect和ssh命令来访问远程机器。</p>

<p>可以应用到网络编程，系统自带的TCP／UDP／RAW socket接口，很方便构建自己的网络客户端和服务器端。而且相比于使用C语言借口来写这些程序要便捷的多，这是因为，除过底层的socket接口，它上层针对一般的服务器应用，结合了多线程，多进程来进行处理来自多个客户端的请求，自带并行处理机制。而对于开发者，如果不是特殊，需要特大吞吐量和突发连接的情况下，做一些常用的工具，是非常方便的，你需要关注一些类似特殊的接口方法，根据业务来实现即可。</p>

<p>至于应用层协议的处理，如http，有很多库，最著名的有requests，有句话怎么说来，“谁用谁知道”。 有处理telnet, ftp, smtp, pop3, imap4等各种相关协议的库。</p>

<p>GUI开发工具除过内嵌的tkinter，界面设计出来丑了点，也算事GUI应用。想写好一点的界面可以用PyGTK, PyQT, PyWin32, wxPython等，总有一款适合你。</p>

<p>现时应用中，很多都不直接开发GUI程序，而是以Web GUI来代替，这是因为它的通用性和适用面广。对于GUI后台的开发，PHP有Zend， Ruby有Rails， Python则有Django, Flask等。现成的MVC结构框架，使用和扩展起来都非常方便。</p>

<p>并行计算支持多线程和多进程，虽然多线程因为GIL的存在并不能充分发挥多cpu的优势，但对于那些需要等待的处理，比如终端输入输出，网络读取等，还是有效率上的提高。那么如果使用多进程库的话，则可以发挥多cpu，多核的好处。</p>

<p>如果项目中存在历史遗留下来的使用C或者C++写成的库，想用Python继续使用它们，可以使用SWIG工具非常方便的集成起来，Python就如同调用自己的写的类，变量和函数一样使用C和C++的库。</p>

<p>数据库的处理更加方便，Python定义了无论哪种数据库，在开发其API的时候，都必须遵循Python所定义好的接口，来完成诸如建立连接，获取游标，进行事务处理等借口。这样以来，实现业务逻辑只需要编码一次，换数据库对这些代码基本是透明的。</p>

<p>要说Python还有什么能力，不能不提它在大数据处理，机器学习方面的应用。众所周知，Python自带数据结构不能处理类似向量，矩阵之类的各种处理，但好在有NumPy这个库，能够完成高阶矩阵的运算。 Pandas则是数据处理的利器，最大用处是将数据做成二维表格，能以位置和标签方便的进行索引和各种变形操作。本身提供一个数据框架，让用户在此之上使用自己的模型。 还有SciPy提供各种算法和数学工具包。 为了展现所有的数据处理结果，有Matplotlib库来生提供类似MATLAB接口，绘制各种图表。</p>

<p>我是觉得在各种领域，你都可以发现Python用武之地，自从用了它，很难再回到C++，Java开发的情况。不是有句话说的好么，“人生苦短，要用Python“.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 语言使用回顾]]></title>
    <link href="http://www.wuli.mobi/blog/2016/01/09/pythonexp/"/>
    <updated>2016-01-09T00:00:00+08:00</updated>
    <id>http://www.wuli.mobi/blog/2016/01/09/pythonexp</id>
    <content type="html"><![CDATA[<h1>Python 语言使用回顾 (一)</h1>

<p>Python是个非常好的语言，用了8年了。从最初对其脚本语言的认知到接触使用到各种高级概念。越发觉得这个语言对于初学者非常友善，同时对于有经验的程序员带来很多帮助，能够在各个方面进行运用，来解决实际的工程问题。</p>

<p>先从友善度来讲，Python对于编程小白或者老程序员都是非常友好的，语法简单易学。现在的受过高等教育的各行各业从业者，基本上都有过使用语言的经验，比如大学我们都学过谭浩强的c语言，至少对于计算机语言都有所认知。对于曾今从理工科毕业尤其是主修通讯，自动控制，信息管理的，可能会接触处更多的诸如汇编语言，都具有编程相关知识和或多或少编程技能。我们来对比C++，Java语言来讲它们语法上的区别，来看Python在语法学习上的友善度。为什么用C++和Java而不是其他语言呢，那是因为它们都是支持OOP的语言，可对比性多一些。那么我们通过一些例子来看。</p>

<p>从最简单的，每个程序都要演示的入门程序的Hello World！来看，C++的语法为:</p>

<pre><code>#include &lt;iostream&gt;
int main()
{
    std::count &lt;&lt; "Hello, World!\n";
    return 0;   
}
</code></pre>

<p>Java语法为:</p>

<pre><code>public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World");
    }
}
</code></pre>

<p>然后再来看Python的</p>

<pre><code>print("Hello World")
</code></pre>

<p>C++和Java都需要一个程序入口，Python则一行一行的解释执行；Java需要把所有的东西都写成类，而Python即可面向对象编程，又可以使用传统的过程化方式来编程。</p>

<p>以上是个简单的例子，可能只是觉得似乎需要输入的代码少了。我们再看看其他语法方面。</p>

<p>Python的语法在形式上区别于其他两门语言的最大的特点是Python将缩进与对齐强制变成语法的一部分，比如下面例子</p>

<pre><code>for x in range(10):
    if x &gt; 5:
        print(x ** 2)
    else:
        print(x ** 3)

    print("Process % done", x)
</code></pre>

<p>这里的代码缩进，对齐都很整齐，这不是一种简单的装饰或者说为了维护方便。这是强制性的。Python和Java，C++不同，不是使用大括号对&#8221;{&ldquo;和&rdquo;}&ldquo;来表示一个语句块的, 它是通过缩进来表示一个语句块，来区分不同的逻辑层次。 比如后面的 <code>print("Process...")</code>语句如果没有正确缩进，放在和其他<code>print</code>相同的列或者与<code>for</code>处于相同的列，就会出现程序的语义或语法错误。 初次看到Python的这个特性，很多人或许说这不灵活，不能灵活写代码。不过用了一段时间你你就会发现这种设置的好处，最大的好处是增强了程序的可维护性。</p>

<p>使用C或者Java写程序，因为使用大括号来匹配语句块的开始与结束，因此，对于那些不遵守coding guidelines的团队来讲，就没有驱动力奖程序写的简洁，最直接的问题就是不对齐，不工整。源程序的存在目的在于维护，在于程序员之间进行交流。团队中有人写完成程序，随着项目的进展，很可能需要修改增加新的特性。即使产品部署后，也需要修改bug，都需要后续的团队人员来读现有的程序，来理解原先的实现。代码除过让机器去运行，最重要的是用来程序员之间进行交流。</p>

<p>Python语法简洁性的另外一个方面表现在对一些概念进行简化，抛弃不必要的一些语言特性。</p>

<p>比如C++和Java对于类属性和成员函数，都有public，protected和private等存取限定。这种设置对于又经验的程序员可能不觉得困难，但是对于初学者，在诸如外部调用或者继承调用等不同使用场景下可能觉得比较烦杂。这虽然本着安全角度来考虑，但是是通过技术手段来限制，Python OOP就没有这种概念，对于该存取不该存取的属性，并没有技术手段来限制，而是通过一些common rules来形成共识，必须以下横线&#8221;_&ldquo;开通的变量就是private属性，两个下横线&rdquo;__&ldquo;则代表更强private意味。 那么所有的人都遵循这些规则，我们一样可以写出安全程序，那么语法上就没有那么繁杂了。</p>

<p>另外，C++和Java实际上提供了很多不是那么常用的的特性，至少是在频率上不那么常用。那么为什么不大胆的舍弃一些特性使得语言显得简练呢？ 这样最大的好处就是嫌少了团队的学习成本。对于一个人来说，很多时间花费在并不常用的特性学习上可能看不到这个代价，但对于一个团队来讲，这个代价就要倍乘。这是因为，一旦有人在代码中用到这些特性，其他一起维护代码的团队成员就不得不熟悉这些特性，来理解采用这些技术的实现。</p>
]]></content>
  </entry>
  
</feed>
