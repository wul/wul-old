<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Wu's Blogs]]></title>
  <link href="http://www.wuli.mobi/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.wuli.mobi/"/>
  <updated>2017-05-20T11:36:34+08:00</updated>
  <id>http://www.wuli.mobi/</id>
  <author>
    <name><![CDATA[Wu Li]]></name>
    <email><![CDATA[li.koun@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 语言使用回顾 (三)]]></title>
    <link href="http://www.wuli.mobi/blog/2016/02/01/python3/"/>
    <updated>2016-02-01T21:42:32+08:00</updated>
    <id>http://www.wuli.mobi/blog/2016/02/01/python3</id>
    <content type="html"><![CDATA[<p>Python是一门相比C，C++更为高级的语言。这里所说的高级并不包含褒义或者贬义，而是指相对于程序操作的对象，我们更关注与业务的需求还是更关注底层对操作系统的请求。</p>

<p>以前我们用C来写程序的时候，如果动态的创建变量，我们需要自己调用malloc等函数来向操作系统申请内存，自己管理好指针，并且在用完之后释放掉。比如，我们要有255个元素大小的一个列表，里面能够存放某种元素（如整数)，我们希望如下进行indexing，slicing和判断一个元素是非在内的操作。</p>

<pre><code>struct element {
    /* 简单的使用一个整数来构成element数据结构*/
    int value;
};

/* 产生一个255个指向element的数组 */
struct element **lst = (struct element**)malloc(sizeof(struct element*) * 255);

/* 初始化这个数组 */
for (int i=0;i&lt;255;i++) {
    struct element *p = (struct element*)malloc(sizeof(struct element));
    p-&gt;value = i;
    lst[i] = p;
}

/* indexing 操作,第三个元素 */
struct element *elem = lst[2];

/* slicing 操作, 去下标2到5中的所有元素 */
struct element **elems = (struct element**)malloc(sizeof(struct element*) * 4);
for (int i=0; i&lt;4; i++) {
    struct element *p = (struct element*)malloc(sizeof(struct element));
    memcpy(p, lst[2+i], sizeof(struct element));
    elems[i] = p;
}

/* 搜索操作,简单的O(n)复杂度搜索。判断一个元素是非在内 */
struct element v = {100};
for (int i=0; i&lt;255; i++) {
    printf("Check %d vs %d\n", lst[i]-&gt;value, v.value);
    if (lst[i]-&gt;value == v.value) {
        printf("True\n");
        break;
    }
}

/* 释放内存 */
for(int i=0; i &lt; sizeof(elems)/sizeof(struct element*); i++){
    free(elems[i]);
}
free(elems);

for(int i=0; i &lt; sizeof(lst)/sizeof(struct element*); i++){
    free(lst[i]);
}
free(lst);   
</code></pre>

<p>我们看到，C程序员必须要处理各种动态内存的分配与释放。 也就是说，除过业务逻辑（indexing， slicing， 查找），我们必须得照顾各种细节。这就意味着程序员要花至少2倍的精力去完成一个需求，这里所列举的业务逻辑非常简单，实际上来自客户的需求远比这个复杂，对于程序设计者，需要熟悉语言所带的各种数据结构，来看是否有现成的来完成逻辑所对应的抽象对象。现有自带的数据结构或者第三方库所带的数据结构如果有现成的数据结构支持业务逻辑是最好的，那就意味着程序员不必在意内存管理的细节（但仍然某种程度上需要熟悉这个库，了解其缺陷），如果没有支持的数据结构，势必需要自己来实现。</p>

<p>那么对于Python来讲，首先用户不必在意内存的管理，自有引用计数和垃圾回收机制，同时自带的数据结构也比较丰富，能够满足常规的业务逻辑，如上的代码如果用Python来实现非常简单，如下所示:</p>

<pre><code>lst = [x for x in range(255)]

#indexing
print(lst[2])

#slicing
print(lst[2:6])

#查找是否存在
print(100 in lst)
</code></pre>

<p>在Python中，整数本身就是一个对象（object），int类的实例，所以这里没有进一步向C一样封装成struct。 对比C的代码，明显感觉到对于list的操作要简单很多，省去了内存管理，省去了很多辅助代码。</p>

<p>但这并不是说，Python这样的高级语言一定全方位都好，各有各的长处。C/C++长处在于速度和能处理广泛性，从嵌入式到大型应用开发； Python在于开发效率和对速度不敏感业务的开发，能够快速给出原型，然后快速迭代，满足客户和市场的快速变化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 语言使用回顾(二）]]></title>
    <link href="http://www.wuli.mobi/blog/2016/01/15/pythonexp2/"/>
    <updated>2016-01-15T06:36:33+08:00</updated>
    <id>http://www.wuli.mobi/blog/2016/01/15/pythonexp2</id>
    <content type="html"><![CDATA[<h1>Python 语言使用回顾 (二)</h1>

<p>接着来说Python的使用经验。上次谈到Python语法规范简洁，对于初学者很友善，同时对于老程序员来讲，会发现其比较简单，舍弃了一些不常用的语言特性。但这绝对不意味着Python功能不行，恰恰相反，Python是语言中的狗皮膏药，在各个领域都能发挥其作用。</p>

<p>我们来看看这个狗皮膏药能贴在那些领域。</p>

<p>对于系统编程，我们指的是和文件系统打交道，跟操作系统打交道。对于系统管理员，QA测试，企业IT来言，很多情况下就是要处理文件，处理进程,获取系统提供的一些服务等等。当然也包括调用一些操作系统的命令来间接地完成一些任务。比如使用snmp相关Linux命令来访问snmp agents，结合pexpect和ssh命令来访问远程机器。</p>

<p>可以应用到网络编程，系统自带的TCP／UDP／RAW socket接口，很方便构建自己的网络客户端和服务器端。而且相比于使用C语言借口来写这些程序要便捷的多，这是因为，除过底层的socket接口，它上层针对一般的服务器应用，结合了多线程，多进程来进行处理来自多个客户端的请求，自带并行处理机制。而对于开发者，如果不是特殊，需要特大吞吐量和突发连接的情况下，做一些常用的工具，是非常方便的，你需要关注一些类似特殊的接口方法，根据业务来实现即可。</p>

<p>至于应用层协议的处理，如http，有很多库，最著名的有requests，有句话怎么说来，“谁用谁知道”。 有处理telnet, ftp, smtp, pop3, imap4等各种相关协议的库。</p>

<p>GUI开发工具除过内嵌的tkinter，界面设计出来丑了点，也算事GUI应用。想写好一点的界面可以用PyGTK, PyQT, PyWin32, wxPython等，总有一款适合你。</p>

<p>现时应用中，很多都不直接开发GUI程序，而是以Web GUI来代替，这是因为它的通用性和适用面广。对于GUI后台的开发，PHP有Zend， Ruby有Rails， Python则有Django, Flask等。现成的MVC结构框架，使用和扩展起来都非常方便。</p>

<p>并行计算支持多线程和多进程，虽然多线程因为GIL的存在并不能充分发挥多cpu的优势，但对于那些需要等待的处理，比如终端输入输出，网络读取等，还是有效率上的提高。那么如果使用多进程库的话，则可以发挥多cpu，多核的好处。</p>

<p>如果项目中存在历史遗留下来的使用C或者C++写成的库，想用Python继续使用它们，可以使用SWIG工具非常方便的集成起来，Python就如同调用自己的写的类，变量和函数一样使用C和C++的库。</p>

<p>数据库的处理更加方便，Python定义了无论哪种数据库，在开发其API的时候，都必须遵循Python所定义好的接口，来完成诸如建立连接，获取游标，进行事务处理等借口。这样以来，实现业务逻辑只需要编码一次，换数据库对这些代码基本是透明的。</p>

<p>要说Python还有什么能力，不能不提它在大数据处理，机器学习方面的应用。众所周知，Python自带数据结构不能处理类似向量，矩阵之类的各种处理，但好在有NumPy这个库，能够完成高阶矩阵的运算。 Pandas则是数据处理的利器，最大用处是将数据做成二维表格，能以位置和标签方便的进行索引和各种变形操作。本身提供一个数据框架，让用户在此之上使用自己的模型。 还有SciPy提供各种算法和数学工具包。 为了展现所有的数据处理结果，有Matplotlib库来生提供类似MATLAB接口，绘制各种图表。</p>

<p>我是觉得在各种领域，你都可以发现Python用武之地，自从用了它，很难再回到C++，Java开发的情况。不是有句话说的好么，“人生苦短，要用Python“.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 语言使用回顾]]></title>
    <link href="http://www.wuli.mobi/blog/2016/01/09/pythonexp/"/>
    <updated>2016-01-09T00:00:00+08:00</updated>
    <id>http://www.wuli.mobi/blog/2016/01/09/pythonexp</id>
    <content type="html"><![CDATA[<h1>Python 语言使用回顾 (一)</h1>

<p>Python是个非常好的语言，用了8年了。从最初对其脚本语言的认知到接触使用到各种高级概念。越发觉得这个语言对于初学者非常友善，同时对于有经验的程序员带来很多帮助，能够在各个方面进行运用，来解决实际的工程问题。</p>

<p>先从友善度来讲，Python对于编程小白或者老程序员都是非常友好的，语法简单易学。现在的受过高等教育的各行各业从业者，基本上都有过使用语言的经验，比如大学我们都学过谭浩强的c语言，至少对于计算机语言都有所认知。对于曾今从理工科毕业尤其是主修通讯，自动控制，信息管理的，可能会接触处更多的诸如汇编语言，都具有编程相关知识和或多或少编程技能。我们来对比C++，Java语言来讲它们语法上的区别，来看Python在语法学习上的友善度。为什么用C++和Java而不是其他语言呢，那是因为它们都是支持OOP的语言，可对比性多一些。那么我们通过一些例子来看。</p>

<p>从最简单的，每个程序都要演示的入门程序的Hello World！来看，C++的语法为:</p>

<pre><code>#include &lt;iostream&gt;
int main()
{
    std::count &lt;&lt; "Hello, World!\n";
    return 0;   
}
</code></pre>

<p>Java语法为:</p>

<pre><code>public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World");
    }
}
</code></pre>

<p>然后再来看Python的</p>

<pre><code>print("Hello World")
</code></pre>

<p>C++和Java都需要一个程序入口，Python则一行一行的解释执行；Java需要把所有的东西都写成类，而Python即可面向对象编程，又可以使用传统的过程化方式来编程。</p>

<p>以上是个简单的例子，可能只是觉得似乎需要输入的代码少了。我们再看看其他语法方面。</p>

<p>Python的语法在形式上区别于其他两门语言的最大的特点是Python将缩进与对齐强制变成语法的一部分，比如下面例子</p>

<pre><code>for x in range(10):
    if x &gt; 5:
        print(x ** 2)
    else:
        print(x ** 3)

    print("Process % done", x)
</code></pre>

<p>这里的代码缩进，对齐都很整齐，这不是一种简单的装饰或者说为了维护方便。这是强制性的。Python和Java，C++不同，不是使用大括号对&#8221;{&ldquo;和&rdquo;}&ldquo;来表示一个语句块的, 它是通过缩进来表示一个语句块，来区分不同的逻辑层次。 比如后面的 <code>print("Process...")</code>语句如果没有正确缩进，放在和其他<code>print</code>相同的列或者与<code>for</code>处于相同的列，就会出现程序的语义或语法错误。 初次看到Python的这个特性，很多人或许说这不灵活，不能灵活写代码。不过用了一段时间你你就会发现这种设置的好处，最大的好处是增强了程序的可维护性。</p>

<p>使用C或者Java写程序，因为使用大括号来匹配语句块的开始与结束，因此，对于那些不遵守coding guidelines的团队来讲，就没有驱动力奖程序写的简洁，最直接的问题就是不对齐，不工整。源程序的存在目的在于维护，在于程序员之间进行交流。团队中有人写完成程序，随着项目的进展，很可能需要修改增加新的特性。即使产品部署后，也需要修改bug，都需要后续的团队人员来读现有的程序，来理解原先的实现。代码除过让机器去运行，最重要的是用来程序员之间进行交流。</p>

<p>Python语法简洁性的另外一个方面表现在对一些概念进行简化，抛弃不必要的一些语言特性。</p>

<p>比如C++和Java对于类属性和成员函数，都有public，protected和private等存取限定。这种设置对于又经验的程序员可能不觉得困难，但是对于初学者，在诸如外部调用或者继承调用等不同使用场景下可能觉得比较烦杂。这虽然本着安全角度来考虑，但是是通过技术手段来限制，Python OOP就没有这种概念，对于该存取不该存取的属性，并没有技术手段来限制，而是通过一些common rules来形成共识，必须以下横线&#8221;_&ldquo;开通的变量就是private属性，两个下横线&rdquo;__&ldquo;则代表更强private意味。 那么所有的人都遵循这些规则，我们一样可以写出安全程序，那么语法上就没有那么繁杂了。</p>

<p>另外，C++和Java实际上提供了很多不是那么常用的的特性，至少是在频率上不那么常用。那么为什么不大胆的舍弃一些特性使得语言显得简练呢？ 这样最大的好处就是嫌少了团队的学习成本。对于一个人来说，很多时间花费在并不常用的特性学习上可能看不到这个代价，但对于一个团队来讲，这个代价就要倍乘。这是因为，一旦有人在代码中用到这些特性，其他一起维护代码的团队成员就不得不熟悉这些特性，来理解采用这些技术的实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[闭包]]></title>
    <link href="http://www.wuli.mobi/blog/2015/05/04/closures/"/>
    <updated>2015-05-04T14:27:03+08:00</updated>
    <id>http://www.wuli.mobi/blog/2015/05/04/closures</id>
    <content type="html"><![CDATA[<p>套用维基百科的解释：闭包（closure）是此法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。我们从一个简单地例子来分析这些话在说什么。</p>

<pre><code>def foo(bar):
    def plus_one():
    return bar+1          #1 引用自由变量 bar

    return plus_one
func1 = foo(100)
func2 = foo(101)
print(func1())                #2 bar 仍然存在， 输出为101
print(func2())                #3 bar 仍然存在， 输出为102
</code></pre>

<p>这个例子中，foo 函数中一个局部变量 bar 被一个其内部定义的函数 plus_one 所引用，并且这个函数被当做对象作为返回值返回。当被返回的函数被调用的时候，其运算的时候仍然能够访问得到 foo 所定义的局部变量 bar，即使此时已经不在 foo 函数内部。 这个就是闭包的一个基本用法。</p>

<p>首先确定的是，闭包在创建的时候封闭了当时的一些状态，并且能够此后被调用的时候利用当时的状态信息。上面例子中，诸如局部变量（plus_one的enclosing函数）bar被plus_one所保留，即使离开了 foo 的执行，plus_one 仍够访问这个当初保留的状态，也即 bar 这个变量。</p>

<p>再者，我们看到，根据不同的环境创建的函数保留了不同的状态而在此后表现出不同的行为（输出分别为101和102），比如根据参数不同生成的两个函数 func1和 func2，非常类似模式里面的工厂方法。创建的时候根据不同的输入而此后表现出不同的行为带给程序员很大的灵活性。</p>

<p>最后，在使用闭包的过程中，需要注意，闭包引用的变量可能在后来发生改变，因此也会影响闭包的行为。比如：函数 plus_one 在创建的时候保留了 bar 的状态，但不意味着此后如果 bar 的值再次修改，不会影响 plus_one 的调用结果。修改上面代码如下:</p>

<pre><code>def foo():
    bar = 100                
    def plus_one():
    return bar+1         
bar = 99                 # 在创建plus_one函数对象之后，修改 bar 会影响 plus_one 的调用结果
    return plus_one
func = foo()
print(func())                # 输出100
</code></pre>

<p>可以看到，return 函数对象plus_one之前，修改过 bar 的值，plus_one 的调用使得它会使用最后一次 bar 的赋值。需要注意一下这个特性，尤其是引用的变量处于循环当中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LEGB规则与 Python 变量的存取]]></title>
    <link href="http://www.wuli.mobi/blog/2015/04/30/legb/"/>
    <updated>2015-04-30T16:38:35+08:00</updated>
    <id>http://www.wuli.mobi/blog/2015/04/30/legb</id>
    <content type="html"><![CDATA[<p>每种语言都有检索变量的规则，决定了当程序查找一个变量的时候，会去哪里找，遵循什么样的搜索顺序。Python 亦然，Python 内部的查询变量的规则简称 LEGB。它是 Local，Environment，Global，Builtin 首字母的缩写。</p>

<p>具体说来，加入一个函数要操作一个叫做 x 的变量，那么 Python 首先在函数内部，局部（Local）范围来查找这个变量；如果没有找到，则到包含这个函数定义的外围去查找（称作 Enclosing)，这个外围或许是另外一个函数（包括匿名函数），如果还是没有，继续朝外查找，一直到模块级别，从这里定义了全局（Global）变量中寻找；如果仍然没有找到，则查找 Python 内置变量(Built-in)，看是否有相同名字的。</p>

<p>在上述查找过程中，一旦变量找到，就不再继续朝外围查找。也就是说 LEGB 同时也定义了从 L 到 B 得优先级。根据这个规则，读 Python 程序的时候，就非常容易判断程序到底操作的是哪个变量。比如一个文件 spam.py：</p>

<pre><code>eggs = 5
def func():
    eggs = 4
    def set():
       eggs = 3
       print(eggs)

    set()               #1  print 3
    print(eggs)         #2  print 4

func()
print(eggs)             #3  print 5
</code></pre>

<p>屏幕依次会输出3，4，5.  道理遵循 LEGB 规则，  #1 set()函数里对 eggs 进行赋值操作会产生一个 set 函数的局部变量；#2 因为之前的 set() 操作处理的时 set 函数内部的变量，并不影响 func 定义的变量 eggs，所以这个变量内容不变；#3 同理 func() 函数调用并不影响全局定义的 eggs 变量，所以打印的全局变量值仍然是5.</p>

<p>从上面的操作及对变量的影响来看，LEGB 规则确实起到作用，变量的查找遵循由内而外的原则。由内到外的指的是 Local->Enclosing->Global->Built-in</p>

<pre><code>--------------------------------------------------------------
|Built-in(Python):                                           |
|    Python 内置的一些预先定义的名字：包括 open ，Exception 等。   |
|    --------------------------------------------------------|
|    |Global(Module):                                        |
|    |    模块文件最外面定义的变量名，属于模块的变量                | 
|    |    ---------------------------------------------------|
|    |    |Enclosing                                         |
|    |    |    定义在外层包含函数里的名字                        |
|    |    |    ----------------------------------------------|
|    |    |    |Local                                        |
|    |    |    |    函数内部所定义的变量                        |
--------------------------------------------------------------
</code></pre>

<p>那么，如果在函数内部想特意使用外面的变量，而不是产生一个新变量，又如何做呢？ Python 提供两个语句，global 和 nonlocal 来声明外围的变量，而不是在函数内部产生一个同名的局部变量。举例如下：</p>

<pre><code>eggs = 5
def func():
    global eggs
    eggs = 4

hams = 10
    def set():
    nonlocal hams
        hams = 99

    set()               
    print(eggs)         #1  print 4
    print(hams)         #2  print 99


func()
print(eggs)             #3  print 4
</code></pre>

<p>此时屏幕输出4,99,4。 #1输出为4原因显而易见；#2输出99是因为 set()函数调用使用 nonlocal 声明，表示改变的 hams 变量是外围 func()函数内部所定义的变量；#3则是因为 func()调用声明 eggs 是全局变量，进而修改了这个变量的值。</p>

<p>需要注意的是global 与 nonlocal 声明的用法。一个声明了变量属于 module（全局的），一个声明了变量属于外围的（上级函数）。如果在 func（）内部的语句“global eggs”变成“nonlocal eggs”则会引起语法错误，因为 eggs 是个全局变量，使用前需要 global 来声明。</p>

<p>到了这里，我们可以自认为了解了Python如何查询，修改变量。基本上如此，对于一般声明的变量是这个规则。但是对于有些变量，他们的声明作用域比较特殊，需要区别对待，依旧举例说明：</p>

<pre><code>x = 100
lst = [1,2,3]
lst2 = [x for x in lst]
print(x)                   #1 still 100

try:
    1/0
except Exception as x:
    pass

print(x)                   #2 UnboundLocalError: local variable 'x' referenced before assignment
</code></pre>

<p>上面的例子中，注意变量 x，除过普通用法，它还用作在另外两个地方</p>

<ul>
<li><p>Comprehansion 变量:</p>

<p>诸如[x for x in lst]里的x，这里定义的这种变量，它的作用域只是这个表达式，Python 3.x之后放置这些变量与其他变量的冲突，修改其作用域到表达式内部。</p></li>
<li><p>Exception 变量： 诸如 &ldquo;Exception as x&rdquo;, 一旦异常被捕获，x 就用来被存放异常对象，<strong>并且在异常处理 excpt 语句结束后被删除！</strong>, 因此之后的 print(x)会报错！</p></li>
</ul>


<p>当然了，如果你仔细维护你的代码，并且遵循 LEGB 规则，你就不会起名同名变量来做类似操作，因此即使你不知道这两种特殊作用域的变量也没有关系。</p>
]]></content>
  </entry>
  
</feed>
